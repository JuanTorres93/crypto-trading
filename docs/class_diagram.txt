classDiagram
  Services <.. Strategy
  Services <.. ExchangeHandler
  Services <.. MarketFinder
  Services <.. AbstractRepository
  MarketFinder <|.. CoinGeckoMarketFinder
  Trade *-- TradeStatus
  SqlAlchemyRepository <-- Trade
  AbstractRepository <|.. SqlAlchemyRepository
  ExchangeHandler <|.. CcxtExchangeHandler
  CcxtExchangeHandler <|.. BinanceCcxtExchangeHandler
  Strategy <.. StrategyOutput
  Strategy <|.. FakeStrategy
  StrategyOutput <.. PositionType

  class MarketFinder{
    <<Interface>>
    -_api
    -_top_markets
    -_markets_to_trade
    +pairs_for_exchange_vs_currency
    +get_top_markets(vs_currency, force=True) list~dict~
    +get_pairs_for_exchange_vs_currency(exchange_id, vs_currency, force=False)
    +get_pairs_for_exchange_symbol_vs(exchange_id, symbol_vs, force=False)
    +list_top_symbols(vs_currency) list
    +provide_markets_to_trade(exchange_id, vs_currency) list~dict~
  }

  class CoinGeckoMarketFinder{
    -_pairs_for_exchange
    -_seconds_to_wait_on_http_error
    -_get_symbol_info(symbol, vs_currency) dict
    -_get_pairs_for_exchange_single_page(exchange_id, page=1)
    -_get_pairs_for_exchange(self, exchange_id, force=False)
  }

  class Trade{
    +id: int
    +symbol: str
    +vs_currency_symbol: str
    +timeframe: str
    +stop_loss: float
    +entry_price: float
    +take_profit: float
    +status: str
    +vs_currency_entry: float
    +crypto_quantity_entry: float
    +entry_fee_vs_currency: float
    +position: str
    +entry_date: str
    +entry_order_exchange_id: str
    +percentage_change_1h_on_entry: str
    +percentage_change_1d_on_entry: str
    +percentage_change_7d_on_entry: str
    +strategy_name: str
    +is_real: bool
    +oco_stop_exchange_id: str = None
    +oco_limit_exchange_id: str = None
    +vs_currency_result_no_fees: float = None
    +modified_stop_loss: float = None
    +modified_take_profit: float = None
    +crypto_quantity_exit: float = None
    +exit_fee_vs_currency: float = None
    +exit_date: str = None
  }

  class TradeStatus{
    +OPENED: str
    +WON: str
    +LOST: str
  }

  class AbstractRepository{
    <<Interface>>
    -_session
    +__init__(session)
    +add_trade(trade)
    +get_trade(id)
    +commit()
    +update_trade_on_oco_order_creation(id, oco_stop_exchange_id, oco_limit_exchange_id)
    +update_trade_on_exit_position(id, vs_currency_result_no_fees, status, crypto_quantity_exit, exit_fee_vs_currency, exit_date)
    +get_opened_positions(symbol=None, vs_currency=None)
    +modify_stop_loss(id, new_stop_loss)
    +modify_take_profit(id, new_take_profit)
  }

  class SqlAlchemyRepository{

  }

  class ExchangeHandler{
    <<Interface>>
    -_exchange_api
    +__init_(exchange_api)
    +buy_market_order(symbol, vs_currency, amount)
    +sell_market_order_diminishing_amount(symbol, vs_currency, amount)
    +fetch_market(symbol, vs_currency):
    +get_candles_for_strategy(symbol, vs_currency, timeframe, num_candles, since)
    +get_candles_last_one_not_finished(symbol, vs_currency, timeframe, num_candles, since)
    +get_fee_factor(symbol, vs_currency, type='spot')
    +get_free_balance(symbol)
    +get_current_price(symbol, vs_currency)
    -_sell_market_order(symbol, vs_currency, amount)
    -_market_from_symbol_and_vs_currency(symbol, vs_currency)
  }

  class CcxtExchangeHandler{
    -_amount_to_precision(self, symbol, vs_currency, amount)
  }

  class BinanceCcxtExchangeHandler{

  }

  class Strategy{
    <<Interface>>
    +perform_strategy(entry_price, **dfs)
    +strategy_name()
  }

  class FakeStrategy{

  }

  class StrategyOutput{
      +can_enter: bool
      +stop_loss: float
      +entry_price: float
      +take_profit: float
      +position_type: str
  }

  class PositionType{
    +LONG
    +SHORT
  }

  class Services{
    +position_can_be_profitable(exchange_handler, strategy_output, symbol, vs_currency, amount)
    +manage_risk_on_entry(vs_currency_on_entry, strategy_output, max_vs_currency_to_use)
    +close_opened_position(symbol, vs_currency)
    +close_all_opened_positions()
    +set_stop_loss_to_break_even_in_opened_position(symbol, vs_currency)
    +set_take_profit_to_percentage_in_opened_position(symbol, vs_currency, percentage)
    +check_every_opened_trade_for_break_even()
    +check_every_opened_trade_for_reduction_in_take_profit(take_profit_percentage_reduction)
    +enter_position(symbol, vs_currency, is_real)
    +compute_strategy_and_try_to_enter(symbol, vs_currency, strategy, strategy_entry_timeframe, is_real)
    +run_bot(simulate)
  }
